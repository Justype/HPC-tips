#!/bin/bash
#
# Copy and Sync files from remote to the local
#
# Author: Justype
# https://github.com/Justype/HPC-tips/tree/main/bin
# 
# You can change remote to where you want to sync.

remote=

# Colors
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

if [ $# == 0 ] || [[ $1 =~ ^(-h|--help)$ ]]; then
    printf "RC is a shortcut for Rclone to copy or sync with same structure.\n\n"
    printf "SYNOPSIS\n"
    printf "    rc [instruction] [options] path\n"
    printf "    rc set remote\n"
    printf "INSTRUCTION\n"
    printf "    from|f|1)    from remote to local (default)\n"
    printf "    to|t|2)      to remote from local\n"
    printf "    ls|lsd|ncdu) list remote files\n"
    printf "OPTIONS\n"
    printf "    -s         sync \"folder\" (one way)\n"
    printf "    -y         yes, no ask\n"
    printf "    -a         all files (include hidden)\n"
    printf "NOTE\n"
    printf "    This tool aims to run at home directory and below.\n"
    printf "    Current Remote: ${BLUE}$remote${NC}\n"
    printf "    If path does not exit at local, do not use absolute or dot path.\n"
    printf "EXAMPLES\n"
    printf "    rc 2 -s .  # sync current directory to remote\n"
    printf "    rc container/conda.ext3   # restore conda.ext3\n"
    printf "    rc set google:backup/hpc  # set remote\n"
    printf "\n"
    exit
elif [[ $1 =~ ^(-v|--version)$ ]];then
    printf "v1.8.1\n"
    exit
fi

#region functions
set_remote () {
    # parameters: 1. name 2. file
    # Change Line 10 of this file
    # On Mac this may have issue
    sed -i "10s/.*/remote=$1/" $2
    printf "set line 10 to "
    printf "${BLUE}$(sed "10!d" $2)${NC}\n"
}

# record command exit status, if 1 then exit 1
run_command () {
    $@
    if [ $? == 1 ]; then
        exit 1
    fi
}
#endregion

# check first parameter is instruction or not
case $1 in
    from|f|1)    instruction=from;           shift;;
    to|t|2)      instruction=to;             shift;;
    ls|lsd|ncdu) instruction=$1; decision=y; shift;;
    set)
        if [ -z $2 ]; then
            printf "Please provide a remote name.\n"
        else
            set_remote $2 $0
        fi
        exit
        ;;
    *)
        printf "No instruction provided! ${RED}Remote to local${NC} by default.\n"
        instruction=from
        ;;
esac

# check if remote is blank
if [ -z $remote ]; then
    printf "${RED}Initialization required${NC}! Example ${BLUE}gdrive:backup${NC}.\n"
    printf "Please enter your ${BLUE}remote:path${NC}: "
    read input
    if [ -z $input ]; then
        printf "Initialization failed. No remote path.\n"
        exit 1
    else
        set_remote $input $0
    fi
    exit
fi

# if path is before options
if ! [[ $1 =~ ^- ]]; then
    path=$1
    shift
fi

# read options
while getopts ":sya" arg
do
    case $arg in
        s) option="sync -i";;
        y) decision=y;;
        a) option_all=y;;
        ?) printf "${RED}Unknown option: $OPTARG${NC}\n"; exit 1;;
    esac
done

# skip read options
shift $(expr $OPTIND - 1 )

# read remaining options
while test $# -gt 0; do
    if ! [[ $1 =~ ^- ]] && [[ -z $path ]]; then
        path=$1
    else
        printf "Unknown argument accepted: $1\n"
        exit 1
    fi
    shift
done

if [ -z $path ]; then
    printf "No path provided. Use PWD!\n"
    path=`pwd`
fi
# Try to auto-detect the type of path
if [[ -z $option ]]; then
    if [ -d $path ]; then
        option="copy -v"
    elif [ -f $path ]; then
        option="copyto -v"
    else
        # If cannot and to remote
        if [ $instruction == "to" ]; then
            printf "Please provide an ${RED}existing${NC} path.\n"
            exit 1
        # If cannot and from remote
        elif [ $instruction == "from" ]; then
            printf "${RED}File not found${NC}: file type is determined by the / at the end. "
            if [[ $path =~ /$ ]]; then
                printf "YES => copy\n"
                option="copy -v"
            else
                printf "NO  => copyto\n"
                option="copyto -v"
            fi
        fi
    fi
fi

## optimize for absolute path, current path, and parent path
if [ -d $path ]; then
    cd $path
    local_path=`pwd`
elif [ -f $path ]; then
    if [[ $path =~ "/" ]]; then
        # If it is a file, go to parent folder.
        cd ${path%/*}
        file_name=${path##*/}
    else
        # If it is at this folder
        file_name=$path
    fi
    local_path=`pwd`/$file_name
else
    # path not exit
    if [[ `pwd` != $HOME ]]; then
        printf "\nThis path does not exist locally. Please run this at home directory.\n"
        exit 1
    else
        local_path=`pwd`/$path
    fi
fi

if ! [[ $local_path =~ ^$HOME ]]; then
    printf "This tool aims to run at home directory and below.\n"
    printf "$local_path does not fit.\n"
    printf "You can create a symbolic link to this folder.\n"
    printf "    ln -s $local_path ~/${local_path##*/}\n\n"
    exit 1
fi

# remove first N characters, N = length of home path + 1
#local_path=$current_path/$path
path_length=`expr ${#HOME} + 1`
# If remote_path ends with :, do not add /
if [[ $remote =~ :$ ]]; then
    remote_path=${remote}${local_path:$path_length}
else
    remote_path=${remote}/${local_path:$path_length}
fi

# other options
if [[ $option_all != "y" ]] && [[ $option != "copyto -v" ]]; then
    other_option="--exclude=.**"
fi

# optimize for sync -y
if [[ $option == "sync -i" ]] && [[ $decision == "y" ]]; then
    option="sync -v"
fi

case $instruction in
    from) command="rclone $option $other_option $remote_path $local_path";;
    to)   command="rclone $option $other_option $local_path $remote_path";;
    ls|lsd|ncdu)   command="rclone $instruction $remote_path";;
esac

printf "${BLUE}[Command]${NC} $command\n"
if [ -z $decision ]; then
    read -p "Are you sure do this? [y/N] " decision
fi

if [[ $decision == "y" ]]; then
    run_command $command
else
    exit
fi
